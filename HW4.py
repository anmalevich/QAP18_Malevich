# Работа с переменными:
# 1. Переменной var_int присвойте значение 10, var_float - значение 8.4, var_str - "No". 

var_int = 10
var_float = 8.4
var_str = 'No'

# 2. Измените значение, хранимое в переменной var_int, увеличив его в 3.5 раза, результат свяжите с переменной big_int.

big_int = var_int*3.5

# 3. Измените значение, хранимое в переменной var_float, уменьшив его на единицу, результат свяжите с той же переменной.

var_float = var_float-1

# 4. Разделите var_int на var_float, а затем big_int на var_float. Результат данных выражений не привязывайте ни к каким переменным.

result1 = var_int / var_float
result2 = big_int / var_float

# 5. Измените значение переменной var_str на "NoNoYesYesYes". При формировании нового значения используйте операции конкатенации (+) и повторения строки (*). 

var_str = var_str * 2 + "Yes" * 3

# 6. Выведите значения всех переменных.

print("Целое число:", var_int)
print("Целое число умноженное на 3:", big_int)
print("Дробное число:", var_float)
print("Деление целого числа на доробное:", result1)
print("Деление умноженного целого числа на дробное:", result2)
print("Преобразованная тринга:", var_str)



# Строки:
# 1. Свяжите переменную с любой строкой, состоящей не менее чем из 8 символов. Извлеките из строки первый символ, затем последний, третий с начала и третий с конца. Измерьте длину вашей строки.

str = "Kapibara"

first_el = str[0]

last_el = str[-1]

third_el = str[2]

third_from_the_end_el = str[-3]

str_length = len(str)

# 2. Присвойте произвольную строку длиной 10-15 символов переменной и извлеките из нее следующие срезы:

str2 = "KapibaraKapibar"

# ● первые восемь символов

first_eight_el = str2[:8]

# ● четыре символа из центра строки

center_str = len(str2) // 2

center_slice = str2[center_str - 2 : center_str + 2]

# ● символы с индексами кратными трем

every_third_el = str2[::3]

# ● переверните строку

reversed_str = str2[::-1]

# 3. Есть строка: “my name is name”. Напечатайте ее, но вместо 2ого “name” вставьте ваше имя.

str3 = "my name is name"

my_name = "Anna"
str4 = str3.replace("name", my_name, 1)

print(str4)

# 4. Есть строка: test_tring = "Hello world!", необходимо

str5 = "Hello world!"

# ● напечатать на каком месте находится буква w

index_of_w = str5.find("w")
print(index_of_w)

# ● кол-во букв l

count_of_l = str5.count("l")
print(count_of_l)

# ● Проверить начинается ли строка с подстроки: “Hello”

starts_with_hello = str5.startswith("Hello")
print(starts_with_hello)

# ● Проверить заканчивается ли строка подстрокой: “qwe”

ends_with_qwe = str5.endswith("qwe")
print(ends_with_qwe)



# Списки:
# 1. Создайте два любых списка и свяжите их с переменными.

list1 = [ 'loop', 'names', 'pillow', 'silence']
list2 = [ 5, 10, 15, 20]

# 2. Извлеките из первого списка второй элемент.

second_el_list1  = list1[1]

# 3. Измените во втором списке последний элемент. Выведите список на экран.

list2[-1] = "loomy"

print(list2)

# 4. Соедините оба списка в один, присвоив результат новой переменной. Выведите получившийся список на экран.

new_list = list1+list2

print(new_list)

# 5. "Снимите" срез из соединенного списка так, чтобы туда попали некоторые части обоих первых списков. Срез свяжите с очередной новой переменной. Выведите значение этой переменной.

slice_new_list= new_list[3:7]

print(slice_new_list)

# 6. Добавьте в список два новых элемента и снова выведите его.

slice_new_list.append('leaves')
slice_new_list.append(55)

print(slice_new_list)

# 7. Даны списки:
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].
# Нужно вернуть список, который состоит из элементов, общих для этих двух списков. -- !не использовать циклы

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

all_el = list(set(a) & set(b))

print(all_el)

# 8. Есть список: [1, 2, 3, 4, 3, 2, 5, 1, 4, 6, 7, 1, 8, 2, 3] оставить в нем только уникальные значения. !не использовать циклы

list5 = [1, 2, 3, 4, 3, 2, 5, 1, 4, 6, 7, 1, 8, 2, 3]

unique_values = list(set(list5))

print(unique_values)




# Логические операции:
# 1. Присвойте двум переменным любые числовые значения.
a = 5
b = 40
# 2. Составьте четыре сложных логических выражения с помощью оператора and, два из которых должны давать истину, а два других - ложь.

exp1 = (a < 8) and (b > 3)
exp2 = (a / 5 == 1) and (b / 40 == 1)

exp3 = (a > 8) and (b < 3)
exp4 = (a * 8 == 43) and (b * 3 == 2)

# 3. Аналогично выполните п. 2, но уже используя оператор or.

exp5 = (a < 8) or (b > 45)
exp6 = (a / 5 == 0) or (b / 40 == 1)

exp7 = (a > 8) or (b < 3)
exp8 = (a * 8 == 43) or (b * 3 == 2)


# 4. Попробуйте использовать в сложных логических выражениях работу с переменными строкового типа.

str9 = "hello"
str10 = "world"

str_exp1 = (len(str9) == 5) and (str2 == "world")
str_exp2 = (len(str9) == 3) or (str2 == "worl")





# Словари:
# 1. Создайте словарь, связав его с переменной school, и наполните его данными, которые бы отражали количество учащихся в десяти разных классах (например, 1а, 1б, 2б, 6а, 7в и т.д.).

school = {
    "1a": 25,
    "1b": 23,
    "2a": 27,
    "2b": 22,
    "3a": 26,
    "4b": 21,
    "5a": 29,
    "6b": 30,
    "7a": 28,
    "8b": 24,
}

# 2. Узнайте сколько человек в каком-нибудь классе.

pupils_in_2a = school["2a"]

# 3. Представьте, что в школе произошли изменения, внесите их в словарь:
# ◦ в трех классах изменилось количество учащихся;

school["2a"] = 26
school["7a"] = 31
school["8b"] = 29

# ◦ в школе появилось два новых класса;

school["9a"] = 27
school["9b"] = 21

# ◦ в школе расформировали один из классов.

del school["2b"]

# 4. Выведите содержимое словаря на экран.

print(school)






# Преобразование типов
# 1. Перевести строку в массив
# "Robin Singh" => ["Robin”, “Singh"]
# "I love arrays they are my favorite" => ["I", "love", "arrays", "they", "are", "my", "favorite"] 

str11 = "Robin Singh"
str12 = "I love arrays they are my favorite"

list11 = str11.split()
list12 = str12.split()

# 2. Дан список: [‘Ivan’, ‘Ivanou’], и 2 строки: Minsk, Belarus
# Напечатайте текст: “Привет, Ivan Ivanou! Добро пожаловать в Minsk Belarus”

names_list = ['Ivan', 'Ivanou']
city = "Minsk"
country = "Belarus"

text11 = f"Привет, {names_list[0]} {names_list[1]}! Добро пожаловать в {city} {country}"

print(text11)

# 3. Дан список ["I", "love", "arrays", "they", "are", "my", "favorite"] сделайте из него строку => "I love arrays they are my favorite"
words_list = ["I", "love", "arrays", "they", "are", "my", "favorite"]

words_str = " ".join(words_list)

# 4. Создайте список из 10 элементов, вставьте на 3-ю позицию новое значение, удалите элемент из списка под индексом 6

list14 = [5, 11, 12,  16, 44, 46, 45, 32, 32, 23]

list14.insert(2, "NewValue")

del list14[6]

# 5.
# Есть 2 словаря
# a = { 'a': 1, 'b': 2, 'c': 3} b = { 'c': 3, 'd': 4,'e': 5}
# Необходимо их объединить по ключам, а значения ключей поместить в список, если у одного словаря есть ключ "а", а у другого нету, то поставить значение None на соответствующую позицию(1-я позиция для 1-ого словаря, вторая для 2-ого)
# ab = {'a': [1, None], 'b': [2, None], 'c': [3, 3], 'd': [None, 4], 'e': [None, 5]}

dict_a = { 'a': 1, 'b': 2, 'c': 3 }
dict_b = { 'c': 3, 'd': 4, 'e': 5 }

all_keys = set(dict_a.keys()).union(set(dict_b.keys()))

combined_dict = {
    key: [dict_a.get(key, None), dict_b.get(key, None)]
    for key in all_keys
}


# *1) Вам передан массив чисел. Известно, что каждое число в этом массиве имеет пару, кроме одного: [1, 5, 2, 9, 2, 9, 1] => 5
# Напишите программу, которая будет выводить уникальное число

arr = [1, 5, 2, 9, 2, 9, 1]

unique_number = 0

for num in arr:
    unique_number ^= num

print(unique_number)

# *2) Дан текст, который содержит различные английские буквы и знаки препинания. Вам необходимо найти самую частую букву в тексте. Результатом должна быть буква в нижнем регистре.
# При поиске самой частой буквы, регистр не имеет значения, так что при подсчете считайте, что "A" == "a". Убедитесь, что вы не считайте знаки препинания, цифры и пробелы, а только буквы.
# Если в тексте две и больше буквы с одинаковой частотой, тогда результатом будет буква, которая идет первой в алфавите. Для примера, "one" содержит "o", "n", "e" по одному разу, так что мы выбираем "e".
# "a-z" == "a"
# "Hello World!" == "l"
# "How do you do?" == "o" "One" == "e"
# "Oops!" == "o"
# "AAaooo!!!!" == "a"
# "a" * 9000 + "b" * 1000 == "a"



# Условия
# 1. Дано целое число. Если оно является положительным, то прибавить к нему 1; в противном случае не изменять его. Вывести полученное число.

number7 = 7 

result7 = number7 + 1 if number7 > 0 else number7

print(result7)

# 2. Даны три целых числа. Найти количество положительных чисел в исходном наборе.

num8 = 1
num9 = 2
num10 = -3

counter9 = sum([num > 0 for num in [num8, num9, num10]])

print(counter9)


# 3. Дан номер года (положительное целое число). Определить количество дней в этом году, учитывая, что обычный год насчитывает 365 дней, а високосный — 366 дней. Високосным считается год, делящийся на 4, за исключением тех годов, которые делятся на 100 и не делятся на 400 (например, годы 300, 1300 и 1900 не являются високосными, а 1200 и 2000 являются).

year = 2024

is_leap_year = (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0)

days_in_year = 366 if is_leap_year else 365

print(days_in_year)

# 4. Дано целое число в диапазоне 1–7. Вывести строку — название дня недели, соответствующее данному числу (1 — «понедельник», 2 — «втор- ник» и т. д.).

days_of_week = {
    1: "понедельник",
    2: "вторник",
    3: "среда",
    4: "четверг",
    5: "пятница",
    6: "суббота",
    7: "воскресенье"
}

day_number = 6

day_name = days_of_week.get(day_number)

print(day_name)

# 5. Единицы массы пронумерованы следующим образом: 1 — килограмм, 2 — миллиграмм, 3 — грамм, 4 — тонна, 5 — центнер. Дан номер едини- цы массы (целое число в диапазоне 1–5) и масса тела в этих единицах (вещественное число). Найти массу тела в килограммах.

# ???



# Цикл for
# 1. Даны два целых числа A и B (A < B). Найти сумму всех целых чисел от A до B включительно.

A = 26
B = 35

total_sum = 0

for i in range(A, B + 1):
    total_sum += i
    print (total_sum)


# 2. Найти сумму всех натуральных чисел в от A до B

total_sum2 = 0
for i in range(max(1, A), B + 1):
    total_sum += i
    print(total_sum2)


# 3. Найти произведение положительных, сумму и количество отрицательных из 10 введенных целых значений.

numbers15 = [1, -2, 3, -4, 5, -6, 7, -8, 9, 10]

product_positive = 1
sum_negative = 0
count_negative = 0

for num in numbers15:
        if num > 0:
            product_positive *= num
        elif num < 0:
            sum_negative += num
            count_negative += 1
            
print(product_positive, sum_negative, count_negative)

# 4. Дан словарь пловцов с их результатами. Напечатать лучший результат заплыва среди 6 участников.
# Бекиш Александр - 21,07
# Будник Алексей - 20,34
# Гребень Анастасия - 22,12 Давидович Татьяна - 30
# Дешук Дмитрий - 24.01
# Казак Анна - 28,17

swimmers = {
    "Бекиш Александр": 21.07,
    "Будник Алексей": 20.34,
    "Гребень Анастасия": 22.12,
    "Давидович Татьяна": 30,
    "Дешук Дмитрий": 24.01,
    "Казак Анна": 28.17
}

best_result = min(swimmers.values())
print(best_result)

# 5.   Есть массив чисел. Известно, что каждое число в этом массиве имеет пару, кроме одного: [1, 5, 2, 9, 2, 9, 1] => 5. Напишите программу, которая будет выводить уникальное число

numbers = [1, 9, 2, 9, 4, 9, 1]

unique_num9 = 0

for num in numbers:
        unique_num9 ^= num 

print(unique_num9)

# Цикл while
# 1. Дано число N. Найти произведение всех чисел от 0 до N.

n =  5
thing = 1
i = 1

while i <= n:
    thing *= i
    i += 1
    print(thing)

else:
   print (0)  


# 2. Поле засеяли цветами двух сортов на площади S1 и S2. Каждый год
# площадь цветов первого сорта увеличивается вдвое, а площадь второго сорта увеличивается втрое. Через сколько лет площадь первых сортов будет составлять меньше 10% от площади вторых сортов.

year9 = 0
s1 = 15
s2 = 25


while s1 >= 0.1 * s2:
    s1 *= 2
    s2 *= 3
    year9 += 1

print(year9)

# 3. Дано целое число N (>0). Используя операции деления нацело и взятия остатка от деления, найти количество и сумму его цифр.

n = 11112
sum_digits = 0
count_digits = 0

while n > 0:
    digit = n % 10
    sum_digits += digit
    count_digits += 1
    n //= 10

print (count_digits, sum_digits)


# 4. Деду M лет, а внуку N лет. Через сколько лет дед станет вдвое старше внука. И сколько при этом лет будет деду и внуку.

# ?